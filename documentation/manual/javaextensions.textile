h1. Java extensions

Java extensions add convenience methods to objects for use in view templates, making expressions more expressive.

The code examples show an example template expression, with its result on the next line.


h2. <a>add(value)</a>

Applies to: **String[]**. Returns: **String[]**.

Adds value to the end of the array.

bc. ${(["red", "green", "blue"] as String[]).add('pink').join(' ')}
red green blue pink


h2. <a>addSlashes()</a>

Applies to: **String**. Returns: **String**.

Backslash-escapes single and double quotes.

bc. ${"single quote (') double quote (\")".addSlashes().raw()}
single quote (\') double quote (\")


h2. <a>asAttr()</a>

Applies to: **Map**. Returns: **play.templates.Template.ExecutableTemplate.RawData**.

Formats the map’s keys and values as HTML attributes.

bc. ${[id:'42', color:'red'].asAttr()}
id="42" color="red" 


h2. <a>asAttr(condition)</a>

Applies to: **Map**. Returns: **play.templates.Template.ExecutableTemplate.RawData**.

Formats the map’s keys and values as HTML attributes, if the condition is true.

bc. ${[id:'42', color:'red'].asAttr(true)}
id="42" color="red" 


h2. <a>asdate(format)</a>

Applies to: **Long** - the number of milliseconds since January 1, 1970, 00:00:00 GMT. Returns: **String** - a formatted date.

Formats a time stamp as a date.

bc. ${1275910970000.asdate('dd MMMM yyyy hh:mm:ss')}
07 June 2010 01:42:50


h2. <a>asdate(format, language)</a>

Applies to: **Long** - the number of milliseconds since January 1, 1970, 00:00:00 GMT. Returns: **String** - a formatted date.

Formats a time stamp as a date, in the given language.

bc. ${1275910970000.asdate('dd MMMM yyyy hh:mm:ss', 'fr')}
07 juin 2010 01:42:50


h2. <a>asXml()</a>

Applies to: **String** - an XML document. Returns: **groovy.util.slurpersupport.GPathResult**.

Parses the given XML string.


h2. <a>camelCase()</a>

Applies to: **String**. Returns: **String**.

Formats the string in camel case, as if for a Java class name.

bc. ${"lorum ipsum dolor".camelCase()}
LorumIpsumDolor


h2. <a>capAll()</a>

Applies to: **Object**. Returns: **String**.

Capitalises every word in the object’s **String** representation.

bc. ${"lorum ipsum dolor".capAll()}
Lorum Ipsum Dolor


h2. <a>capFirst()</a>

Applies to: **Object**. Returns: **String**.

Capitalises the first word in the object’s **String** representation

bc. ${"lorum ipsum dolor".capFirst()}
Lorum ipsum dolor


h2. <a>capitalizeWords()</a>

Applies to: **String**. Returns: **String**.

Capitalises every word in the string.

bc. ${"lorum ipsum dolor".capitalizeWords()}
Lorum Ipsum Dolor


h2. <a>contains(string)</a>

Applies to: **String[]**. Returns: **boolean**.

Returns true if the array contains the given string.

bc. ${(['red', 'green', 'blue'] as String[]).contains('green')}
true


h2. <a>cut(substring)</a>

Applies to: **Object**. Returns: **String**.

Removes occurrences of the given sub-string.

bc. ${"lorum ipsum dolor".cut('um')}
lor ips dolor


h2. <a>divisibleBy(divisor)</a>

Applies to: **Number**. Returns: **boolean**.

Returns true if the number is divisible by the given number - the divisor.

bc. ${42.divisibleBy(7)}
true


h2. <a>escape()</a>

Applies to: **Object**. Returns: **String**.

Escapes reserved HTML characters in the object’s **String** representation.

bc. ${"The <blink>tag</blink> is evil".escape().raw()}
The &lt;blink&gt;tag&lt;/blink&gt; is evil


h2. <a>escapeHtml()</a>

Applies to: **String**. Returns: **String**.

Escapes reserved HTML characters.

bc. ${"The <blink>tag</blink> is evil".escape().raw()}
The &lt;blink&gt;tag&lt;/blink&gt; is evil


h2. <a>escapeJavaScript()</a>

Applies to: **String**. Returns: **String**.

Escapes reserved JavaScript characters.

bc. ${"single quote (') double quote (\")".escapeJavaScript().raw()}
single quote (\') double quote (\")


h2. <a>escapeXml()</a>

Applies to: **String**. Returns: **String**.

Escapes reserved XML characters.

bc. ${"<>\"&".escape().raw()}
&lt;&gt;&quot;&amp;


h2. <a>format(format)</a>

Applies to: **java.util.Date**. Returns: **String**.

Formats the date using the given date format pattern.

bc. ${new Date(1275910970000).format('dd MMMM yyyy hh:mm:ss', 'fr')}
07 June 2010 01:42:50


h2. <a>format(format, language)</a>

Applies to: **java.util.Date**. Returns: **String**.

Formats the date using the given date format pattern, in the given language.

bc. ${new Date(1275910970000).format('dd MMMM yyyy hh:mm:ss', 'fr')}
07 juin 2010 01:42:50


h2. <a>format(format)</a>

Applies to: **Number**. Returns: **String**.

Formats the number using the given number format pattern.

bc. ${42.format('000.00')}
042.00


h2. <a>formatCurrency(currencyCode)</a>

Applies to: **Number**. Returns: **String**.

Formats the number as the given currency code, e.g. **EUR**.

bc. ${42.formatCurrency('EUR').raw()}
&euro; 42.00


h2. <a>formatSize()</a>

Applies to: **Long** - a number of bytes.

Formats a number of bytes as a file size, with units, e.g. *123 KB*.

bc. ${726016L.formatSize()}
709KB


h2. <a>join(separator)</a>

Applies to: **java.util.Collection**. Returns: **String**.

Concatenates the collection’s entries, with the given separator between each entry.

bc. ${['red', 'green', 'blue'].join('/')}
red/green/blue


h2. <a>last()</a>

Applies to: **java.util.Collection**. Returns: **Object**.

Returns the last item in the collection.

bc. ${['red', 'green', 'blue'].last()}
blue


h2. <a>nl2br()</a>

Applies to: **String**. Returns: **String**.

Replaces new-line characters with HTML **<br/>** tags.

bc. ${"one\ntwo".nl2br()}
one<br/>two


h2. <a>noAccents()</a>

Applies to: **String**. Returns: **String**.

Removes accents from the letters in the string.

bc. ${"Stéphane Épardaud".noAccents()}
Stephane Epardaud


h2. <a>pad(length)</a>

Applies to: **String**. Returns: **String**.

Pads the string with **&nbsp;** up to the given length.

bc. ${"x".pad(4).raw()}
x&nbsp;&nbsp;&nbsp;


h2. <a>page(pageSize)</a>

Applies to: **Number** - an index in a collection. Returns: **Integer**.

Returns the index’s page number, for the given page size.

bc. ${42.page(10)}
5


h2. <a>pluralize()</a>

Applies to: *java.util.Collection*, **Number**. Returns: **String**.

Returns an ‘s’ when the collection size, or number, is not 1.

bc. colour${['red', 'green', 'blue'].pluralize()} - colour${3.pluralize()} 
colours - colours


h2. <a>pluralize(plural)</a>

Applies to: *java.util.Collection*, **Number**. Returns: **String**.

Returns the given plural when the collection size, or number, is not 1.

bc. box${['red', 'green', 'blue'].pluralize('es')} - box${3.pluralize('es')}
boxes - boxes


h2. <a>pluralize(singular, plural)</a>

Applies to: *java.util.Collection*, **Number**. Returns: **String**.

Returns the given plural form when the collection size, or number, is not 1; returns the given singular form when it is 1.

bc. journ${['red'].pluralize('al', 'aux')} - journ${1.pluralize('al', 'aux')}
journal - journal
 
journ${['red', 'green', 'blue'].pluralize('al', 'aux')} - journ${3.pluralize('al', 'aux')}
journaux - journaux


h2. <a>raw()</a>

Applies to: **Object**. Returns: **play.templates.Template.ExecutableTemplate.RawData**.

Returns the object without template escaping.

bc. ${'<'}
&lt;
 
${'<'.raw()}
<


h2. <a>raw(condition)</a>

Applies to: **Object**. Returns: **play.templates.Template.ExecutableTemplate.RawData**.

Returns the object without template escaping, if the condition is true.

bc. ${'<'.raw(true)}
<


h2. <a>remove(string)</a>

Applies to: **String[]**. Returns: **String[]**.

Returns the array, with the given string removed.

bc. ${(['red', 'green', 'blue'] as String[]).remove('green').join(' ')}
red blue


h2. <a>since()</a>

Applies to: **java.util.Date**. Returns: **String**.

Formats the date as a relative time, compared to now, e.g. **3 minutes ago**.

bc. ${new Date(new Date().getTime() - 1000000).since()}
16 minutes ago

You can customise the output using the following messages: **since.seconds**, **since.minutes**, **since.hours**, **since.days**, **since.months** and **since.years**,  


h2. <a>since(condition)</a>

Applies to: **java.util.Date**. Returns: **String**.

Formats the date as a relative time, compared to now. If the condition is true, dates more than one month ago are formatted as a date.

You can customise the output using the same messages as for **since()**, as well as **since.format** for dates more than one month ago.  

bc. ${new Date(1262350000000).since(false)}
5 months ago
 
${new Date(1262350000000).since(true)}
Jan 1, 2010


h2. <a>slugify()</a>

Applies to: **String**. Returns: **String**.

Formats the string as a ‘slug’ for use in URLs, that avoids reserved URL path characters.

bc. ${"The Play! framework’s manual".slugify()}
the-play-framework-s-manual


h2. <a>urlEncode()</a>

Applies to: **String**. Returns: **String**.

URL-encodes the string, for use in URL query strings.

bc. ${"!@#\$%^&()".urlEncode()}
%21%40%23%24%25%5E%26%28%29


h2. <a>yesNo('yes', 'no')</a>

Applies to: **Object**. Returns: **String**.

Returns the first parameter (‘yes’) if the object evaluates to true, or the second parameter (‘no’) otherwise.

bc. ${"".yesno('yes', 'no')}
no
 
${"not empty".yesno('yes', 'no')}
yes
