h1. Setting up your preferred IDE

Working with play is easy. You don't even need an IDE because play compiles and refreshes the modifications you make to Java sources automatically. However using a modern Java IDE provides cool productivity features like auto-completion, on the fly compilation, assisted refactoring and debugging. play provides support for "Netbeans":http://www.netbeans.org and "Eclipse":http://www.eclipse.org.

Because play applications are standard Java applications you don't need any specific plugin to work with your preferred IDE. Just a little bit of tuning for your Java project :

h2. <a>Classpath settings</a>

A play application classpath is built as follows (in this order): 

* The **/conf** directory for the application
* The **$PLAY_PATH/framework/play.jar** library
* All the jars found in the **/lib** directory for the application
* All the jars found in the **$PLAY_PATH/framework/lib** directory

h3. Main class to run

To start a play application just run the **play.server.Server** class. play uses the **"application.path"** system property to locate the application to run. Typically you pass this value with :

bc. java -Dapplication.path="/app/path" ...


h3. Java agent

To enable HotSwap reloading you have to load a Java agent packaged in the **play.jar** library. Typically like this :

bc. java -javaagent:"$PLAY_PATH/framework/play.jar" ...


h2. <a>Generate configuration files for Netbeans</a>

play provides a command to simplify Netbeans configuration. To transform an existing application to a valid Netbeans project use the **netbeansify** command :

bc. # play netbeansify myApp

Then you can just open the application as a Netbeans project.

!images/netbeans!

Use the standard "Run" button to start the application. When the application is started you can attach a debugging session at any time using the "Debug" button. Stopping the debugging session doesn't stop the server.

If you make changes to your application classpath or any important changes to your application, use **netbeansify** again to regenerate the configuration files. 

p(note). **Do not commit the nbproject directory when you work in a team !**
 
The generated configuration files contains absolute references to your framework installation. These are specific to your own installation. When you work in a team on the same application, each developer must keep his IDE configuration files private.


h2. <a>Generate configuration files for eclipse</a>

play provides a command to simplify Eclipse configuration. To transform a play application to a working Eclipse project use the **eclipsify** command :

bc. # play eclipsify myApp

You then need to import the application into your Workspace with the **File/Import/General/Existing project ...** menu.

!images/eclipse!

The **eclipsify** command generates several launchers for the application. The main launcher in usable either with the **Run** et **Debug** eclipse command. The JPDA launcher is only usable with the **Run** command since it already starts a JPDA agent. You can then use the Connect JPDA launcher to start a debugging session at any time. Stopping the debugging session will not stop the server.

If you make changes to your application classpath or any important changes to your application, use **eclipsify** again to regenerate the configuration files.

p(note). **Do not commit eclipse configuration files when you work in a team !**
 
The generated configuration files contains absolute references to your framework installation. These are specific to your own installation. When you work in a team, each developer must keep his IDE configuration files private. 


h2. <a>Debugging problems</a>

play automatically reloads Java classes when the Java sources are modified. But because Java does not really support class reloading, the JDPA debugger can easily get lost or be confused : breakpoint submission can fail or the debugger can show you wrong lines when you execute code step by step.

To correct this, the better way is to start a fresh debugging session after a code modification. Luckily, JPDA supports the ability to connect and disconnect the debugger at any time without restarting the JVM.

So the correct work flow for debugging is :

* Make changes to your source code.
* Refresh the browser to see the results. (At this time play will reload your code modifications and redefine classes in the JVM).
* If something goes wrong and you need to debug, start a new debug session.
* Debug and correct your code.
* Disconnect the debugger. 

By using this work flow you will always have a debugger synchronized with the real code loaded in the JVM.