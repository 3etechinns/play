h1. Overview

The play framework makes it easier to build Web applications with Java. It's a clean alternative to bloated Enterprise Java stacks. It focuses on developers productivity and targets RESTfull architectures. 

Play is a perfect companion for *agile sofware development*.

p(note). Wanna see some code ? Check "Five cool things you can do with play":5things, or try the "hello world tutorial":helloworld.


h2. <a name="java">Pure Java framework</a>

Play is a pure Java framework and allows you to keep your preferred development tools and libraries. If you already use Java as a development platform you don't need to switch to another language, another IDE and other libraries. *Just switch to a more productive Java environment !*

A play application looks really coherent to any Java developer : 

!images/structure!


h2. <a name="http">Built over HTTP</a>

If you are already using another Java Web framework like Servlet API or Struts framework, you allready have used an abstract view of the HTTP protocol with strange Java APIs and concepts. We think differently. A Web applications framework should give you full, straightforward access to HTTP and its concepts. This is a fundamental difference between Play and other Java web application frameworks.

HTTP, the Request/Response pattern, the REST architectural style, content-type negotiation, URI are all major concepts for the play framework. 

For instance, binding an URI pattern to a Java call is a matter of one line:

bc. GET    /clients/{id}        Clients.show

If AJAX, REST and managing back/forward movement between web pages are some of the issues you face in your day-to-day web development, just give play a try.


h2. <a name="templates">Efficient templating engine</a>

We like the idea behind JSP & Expression Language. But why are so many configuration files necessary to create a Tag library? Why shouldn't we have  full access to the underlying object model? JSP has a lot of limitations and this is indeed frustrating.  That's why we've created our custom template system, inspired by JSP but without its constraints ! 

You and anyone else should be tired of writing things like this:

bc. <%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/functions" prefix="fn" %>
 
<c:choose>
    <c:when test="${emails.unread != null && fn:size(emails.unread)}">
        You've ${fn:size(emails.unread)} unread emails !
    </c:when>
    <c:otherwise>
        You've none unread emails !
    </c:otherwise>
</c:choose>

We think you would certainly prefer to write the following:

bc. You've ${email.unread?.size() ?: 'none'} unread emails !

The expression language used by play template engine is "Groovy":http://groovy.codehaus.org/ which provides a syntax consistent with Java syntax. While play mainly uses the templating system to render HTML responses, you are free to use it to generate any other documents such as email messages, json responses, etc.


h2. <a name="reload">Fix the bug and hit Reload</a>

The Java platform is indeed infamous for its low productivity, mainly because of its repeated and tedious compile-package-deploy cycles.

The main goal of the play framework is to reach maximum productivity within the Java platform. That's why we rethought the development cycle to make developing with play an efficient process.

The framework compiles your Java sources directly and hot-reloads them into the JVM without the need to restart the server. You can then edit, reload and see your modifications immediately, just as in any LAMP environment. 

Whenever an error occurs, the framework makes its best effort to show you the problem code. No more cryptic errors and recursive stack traces to analyse to find a syntax error.

!images/error!

If you like work in *Test Driven develoment* mode, the integrated tests runner will allow you to quickly write tests, run them and fix them in an unified environment.


h2. <a name="full-stack">Full-stack application framework</a>

The play framework was initially inspired by our own Java applications. It has all the tools needed to create a modern web application :

* Relational Database support through JDBC.
* Object-Relational Mapping using Hibernate (with the JPA API).
* Integrated Cache support, with easy use of the distributed memcached system if needed.
* Straightforward Web services consumption either in JSON or XML (we talk about *real* web services here; not the SOAP stuff).
* OpenID support for distributed authentication.
* Image manipulation API.
* ...

A modular architecture lets you combine a Web application with many other Web applications. With play application modules, you can of course reuse some Java code, but templates or static resources (like Javascript and CSS) as well.

p(note). **Give it a try**
 
"Install the play framework":install and start developing your first application.
